{
    "prereq": [
        {
            "update-user-perms": "sudo usermod -aG dialout,sudo,input $USER",
            "add-ros-source": [
                "sudo apt update && sudo apt install curl gnupg lsb-release",
                "sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg",
                "echo 'deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(source /etc/os-release && echo $UBUNTU_CODENAME) main' | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null",
                "sudo apt update",
                "sudo apt upgrade"
            ],
            "install-utils": "sudo apt-get install git nano can-utils net-tools openssh-server ros-humble-desktop python3-rosdep2 python3-colcon-common-extensions ros-humble-slam-toolbox ros-humble-robot-localization",
            "remove-modemmanger": "sudo apt-get remove modemmanager -y",
            "update-ros-dept": [
                "sudo rosdep init",
                "rosdep update"
            ]
        }
    ],
    "rover_ros_subsystem_files": [
        {
            "create_rover_ros_env": [
                "sudo mkdir -p /etc/roverrobotics/",
                "cat << EOF1 | sudo tee /etc/roverrobotics/env.sh",
                "#!/bin/sh",
                "export ROS_HOSTNAME=localhost",
                "export ROS_MASTER_URI=http://localhost:11311",
                "EOF1",
                "if [ -f /etc/roverrobotics/env.sh ]",
                "then",
                "    echo \"create_rover_ros_env: Success\" >> $KEY_VERIFICATION_FILE",
                "else",
                "    echo \"create_rover_ros_env: Failure\" >> $KEY_VERIFICATION_FILE",
                "fi"
            ],
            "create_rover_startup_service": [
                "cat << EOF3 | sudo tee /etc/systemd/system/roverrobotics.service",
                "[Service]",
                "Type=simple",
                "User=$USER",
                "ExecStart=/usr/sbin/roverrobotics",
                "[Install]",
                "WantedBy=multi-user.target",
                "EOF3",
                "sudo systemctl enable roverrobotics.service",
                "if [ -f /etc/systemd/system/roverrobotics.service ]",
                "then",
                "    echo \"create_rover_startup_service: Success\" >> $KEY_VERIFICATION_FILE",
                "else",
                "    echo \"create_rover_startup_service: Failure\" >> $KEY_VERIFICATION_FILE",
                "fi"
            ]
        }
    ],
    "rpilidar_repo": [
        {
            "download_rpi_lidar": [
                "cd ~/rover_workspace/src/",
                "git clone $KEY_RPI_ROS $KEYV_RPI_ROS",
                "if [ -d ~/rover_workspace/src/$KEYV_RPI_ROS ]",
                "then",
                "    echo \"rpilidar_repo: Success\" >> $KEY_VERIFICATION_FILE",
                "else",
                "    echo \"rpilidar_repo: Failure\" >> $KEY_VERIFICATION_FILE",
                "fi"
            ]
        }
    ],
    "rover_startup_script_mini": [
        {
            "create_startup_script": [
                "cat << \"EOF2\" | sudo tee /usr/sbin/roverrobotics",
                "#!/bin/bash",
                "source ~/rover_workspace/install/setup.sh",
                "source /etc/roverrobotics/env.sh",
                "sudo chmod 666 /dev/ttyACM0",
                "ros2 launch roverrobotics_driver mini_teleop.launch.py",
                "PID=$!",
                "wait \"$PID\"",
                "EOF2",
                "sudo chmod +x /usr/sbin/roverrobotics",
                "if [ -f /usr/sbin/roverrobotics ]",
                "then",
                "    echo \"create_startup_script: Success\" >> $KEY_VERIFICATION_FILE",
                "else",
                "    echo \"create_startup_script: Failure\" >> $KEY_VERIFICATION_FILE",
                "fi"
            ]
        }
    ],
    "rover_startup_script_mega": [
        {
            "create_startup_script": [
                "cat << \"EOF2\" | sudo tee /usr/sbin/roverrobotics",
                "#!/bin/bash",
                "source ~/rover_workspace/install/setup.sh",
                "source /etc/roverrobotics/env.sh",
                "sudo chmod 666 /dev/ttyACM0",
                "ros2 launch roverrobotics_driver mega_teleop.launch.py",
                "PID=$!",
                "wait \"$PID\"",
                "EOF2",
                "sudo chmod +x /usr/sbin/roverrobotics",
                "if [ -f /usr/sbin/roverrobotics ]",
                "then",
                "    echo \"create_startup_script: Success\" >> $KEY_VERIFICATION_FILE",
                "else",
                "    echo \"create_startup_script: Failure\" >> $KEY_VERIFICATION_FILE",
                "fi"
            ]
        }
    ],
    "can_service": [
        {
            "create_can_service": [
                "cat << EOF6 | sudo tee /etc/systemd/system/can.service",
                "[Service]",
                "Type=simple",
                "User=root",
                "ExecStart=/enablecan.sh",
                "[Install]",
                "WantedBy=multi-user.target",
                "EOF6",
                "sudo systemctl enable can.service",
                "if [ -f /etc/systemd/system/can.service ]",
                "then",
                "    echo \"create_can_service: Success\" >> $KEY_VERIFICATION_FILE",
                "else",
                "    echo \"create_can_service: Failure\" >> $KEY_VERIFICATION_FILE",
                "fi"
            ],
            "create_can_script": [
                "cat << EOF7 | sudo tee /enablecan.sh",
                "#!/bin/bash",
                "sudo ip link set can0 type can bitrate 500000 sjw 127 dbitrate 2000000 dsjw 15 berr-reporting on fd on",
                "#sudo ip link set can1 type can bitrate 500000 dbitrate 2000000 berr-reporting on fd on",
                "sudo ip link set up can0",
                "#sudo ip link set up can1",
                "EOF7",
                "sudo chmod +x /enablecan.sh",
                "if [ -f /enablecan.sh ]",
                "then",
                "    echo \"create_can_script: Success\" >> $KEY_VERIFICATION_FILE",
                "else",
                "    echo \"create_can_script: Failure\" >> $KEY_VERIFICATION_FILE",
                "fi"
            ],
            "enable_can_once": [
                "sudo ip link set can0 type can bitrate 500000 sjw 127 dbitrate 2000000 dsjw 15 berr-reporting on fd on",
                "sudo ip link set up can0",
                "if ifconfig | grep -q can0 ",
                "then",
                "    echo \"enable_can_once: Success\" >> $KEY_VERIFICATION_FILE",
                "else",
                "    echo \"enable_can_once: Failure\" >> $KEY_VERIFICATION_FILE",
                "fi"
            ]
        }
    ],
    "roverrobotics_ros2": [
        {
            "download_roverrobotics_ros1": [
                "mkdir -p ~/rover_workspace/src",
                "cd ~/rover_workspace/src/",
                "git clone $KEY_ROVER_ROS2",
                "if [ -d ~/rover_workspace/src/$KEYV_ROVER_ROS2 ]",
                "then",
                "    echo \"download_roverrobotics_ros1: Success\" >> $KEY_VERIFICATION_FILE",
                "else",
                "    echo \"download_roverrobotics_ros1: Failure\" >> $KEY_VERIFICATION_FILE",
                "fi"
            ],
            "download_librover": [
                "mkdir -p ~/library",
                "cd ~/library",
                "git clone $KEY_LIBROVER $KEYV_LIBROVER",
                "if [ -d ~/library/$KEYV_LIBROVER ]",
                "then",
                "    echo \"download_librover: Success\" >> $KEY_VERIFICATION_FILE",
                "else",
                "    echo \"download_librover: Failure\" >> $KEY_VERIFICATION_FILE",
                "fi"
            ],
            "install_librover": [
                "cd ~/library/librover",
                "cmake .",
                "make",
                "sudo make install",
                "if [ -f /usr/lib/liblibrover.so ]",
                "then",
                "    echo \"install_librover: Success\" >> $KEY_VERIFICATION_FILE",
                "else",
                "    echo \"install_librover: Failure\" >> $KEY_VERIFICATION_FILE",
                "fi"
            ]
        }
    ],
    "setup_launch_mini": [
        {
            "replace_launch_file": [
                "sudo sed -i 's/placeholder/$KEY_MINI_LAUNCH/g' /usr/sbin/roverrobotics",
                "if grep \"$KEY_MINI_LAUNCH\" /usr/sbin/roverrobotics",
                "then",
                "    echo \"replace_launch_file: Success\" >> $KEY_VERIFICATION_FILE",
                "else",
                "    echo \"replace_launch_file: Failure\" >> $KEY_VERIFICATION_FILE",
                "fi"
                
            ]
        }
    ],
    "setup_launch_mega": [
        {
            "replace_launch_file": [
                "sudo sed -i 's/placeholder/$KEY_MEGA_LAUNCH/g' /usr/sbin/roverrobotics",
                "if grep \"$KEY_MEGA_LAUNCH\" /usr/sbin/roverrobotics",
                "then",
                "    echo \"replace_launch_file: Success\" >> $KEY_VERIFICATION_FILE",
                "else",
                "    echo \"replace_launch_file: Failure\" >> $KEY_VERIFICATION_FILE",
                "fi"
                
            ]
        }
    ],
    "setup_launch_zero2": [
        {
            "replace_launch_file": [
                "sudo sed -i 's/placeholder/$KEY_ZERO2_LAUNCH/g' /usr/sbin/roverrobotics",
                "if grep \"$KEY_ZERO2_LAUNCH\" /usr/sbin/roverrobotics",
                "then",
                "    echo \"replace_launch_file: Success\" >> $KEY_VERIFICATION_FILE",
                "else",
                "    echo \"replace_launch_file: Failure\" >> $KEY_VERIFICATION_FILE",
                "fi"
            ]
        }
    ],
    "rover_udev": [
        {
            "create_udev": [
                "cat << EOF8 | sudo tee /etc/udev/rules.d/55-roverrobotics.rules",
                "#creates fixed name for rover serial communication",
                "#rover zero v2",
                "KERNEL==\"ttyUSB[0-9]\", ATTRS{idVendor}==\"0403\", ATTRS{serial}==\"Rover Zero 2\", MODE:=\"0777\", SYMLINK+=\"rover-zero-v2\", RUN+=\"/bin/setserial /dev/%k low_latency\" ",
                "# rover pro",
                "KERNEL==\"ttyUSB[0-9]\", ATTRS{idVendor}==\"0403\", ATTRS{serial}==\"Rover Pro\", MODE:=\"0777\", SYMLINK+=\"rover-pro\", RUN+=\"/bin/setserial /dev/%k low_latency\"",
                "EOF8",
                "sudo udevadm control --reload-rules && sudo udevadm trigger",
                "if [ -f /etc/udev/rules.d/55-roverrobotics.rules ]",
                "then",
                "    echo \"create_udev: Success\" >> $KEY_VERIFICATION_FILE",
                "else",
                "    echo \"create_udev: Failure\" >> $KEY_VERIFICATION_FILE",
                "fi"

            ]
        }
    ],
    "colcon_build": [
        {
            "update_ros_dep": [
                "cd ~/rover_workspace",
                "rosdep install --from-paths src --ignore-src -r -y",
                "echo source ~/rover_workspace/install/setup.sh >> ~/.bashrc",
                "echo source /opt/ros/humble/setup.bash >> ~/.bashrc",
                "source ~/.bashrc",
                "source /opt/ros/humble/setup.bash",
                "colcon build"
            ]
        }
    ],
    "start_rover_ros2_services": [
        {
            "start_roverrobotics_service": [
                "source /opt/ros/humble/setup.bash",
                "source ~/rover_workspace/install/setup.sh",
                "sudo systemctl start roverrobotics.service",
                "if sudo systemctl status roverrobotics.service | grep -i running",
                "then",
                "    echo \"start_roverrobotics_service: Success\" >> $KEY_VERIFICATION_FILE",
                "else",
                "    echo \"start_roverrobotics_service: Failure\" >> $KEY_VERIFICATION_FILE",
                "fi"
            ]
        }
    ],
    "uninstall_scripts": [
        {
            "remove-catkin_ws": [
                "sed -i '/humble/d' ~/.bashrc",
                "sed -i '/rover_workspace/d' ~/.bashrc",
                "sudo mv ~/rover_workspace/ ~/catkin_ws_old/",
                "sudo rm -rf ~/library #librover and ps4 driver",
                "sudo rm -rf /etc/udev/rules.d/55-roverrobotics.rules #rover udev",
                "sudo rm -rf /etc/roverrobotics #env",
                "sudo rm -rf /usr/sbin/roverrobotics #selector",
                "sudo rm -rf /etc/systemd/system/roverrobotics.service #robot service",
                "sudo rm /etc/systemd/system/can.service #can startup",
                "sudo rm -rf /enablecan.sh #can enabler",
                "source ~/.bashrc"
            ]
        }
    ]
}
